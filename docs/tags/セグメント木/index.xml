<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>セグメント木 on yamate11のブログ</title>
    <link>https://yamate11.github.io/blog/tags/%E3%82%BB%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%88%E6%9C%A8/</link>
    <description>Recent content in セグメント木 on yamate11のブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Dec 2023 12:21:00 +0900</lastBuildDate><atom:link href="https://yamate11.github.io/blog/tags/%E3%82%BB%E3%82%B0%E3%83%A1%E3%83%B3%E3%83%88%E6%9C%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>セグメント木ライブラリ</title>
      <link>https://yamate11.github.io/blog/posts/2023/12-03-segment-tree-lib/</link>
      <pubDate>Sun, 03 Dec 2023 12:21:00 +0900</pubDate>
      
      <guid>https://yamate11.github.io/blog/posts/2023/12-03-segment-tree-lib/</guid>
      <description>自作セグメント木ライブラリ の使い方についての自分用のメモです． AtCoder Library にセグメント木はありますが， それができる前から使っていたものなので&amp;hellip;
使用法 値の型を DAT, 更新演算の型を OP とする．
基本のセグメント木 作成  auto st = make_seg_tree(unit_dat, add, init_vec);  unit_dat は，加法単位元 add には，加法の演算を行う関数を指定する． 関数ポインタ，クロージャ，関数オブジェクトが使える． init_vec は初期ベクトル  初期ベクトル設定は，分けても良い:
 auto st = make_seg_tree(unit_dat, add);  st.set_data(init_vec); 値の設定  st.update(i, x); $i$ 番目の値として $x$ を設定する． 1点しか設定できないので，2引数であることに注意．
値の取得  DAT x = st.query(il, ir);  DAT x = st[i]; // これは，st.query(i, i + 1) と同じ $il$ 以上 $ir$ 未満の値に add を適用した結果を返す．</description>
    </item>
    
  </channel>
</rss>
