<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trie on yamate11のブログ</title>
    <link>https://yamate11.github.io/blog/tags/trie/</link>
    <description>Recent content in trie on yamate11のブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 28 Jun 2025 10:51:24 +0900</lastBuildDate>
    <atom:link href="https://yamate11.github.io/blog/tags/trie/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trie ライブラリ</title>
      <link>https://yamate11.github.io/blog/posts/2025/06-28-trie-with-pointers/</link>
      <pubDate>Sat, 28 Jun 2025 10:51:24 +0900</pubDate>
      <guid>https://yamate11.github.io/blog/posts/2025/06-28-trie-with-pointers/</guid>
      <description>ポインタベースの Trie ライブラリ． ソース 使用法 auto root = new Trie&amp;lt;26, &amp;#39;a&amp;#39;&amp;gt;(); auto p1 = root-&amp;gt;insert(&amp;#34;abcde&amp;#34;); // 挿入 auto p2 = root-&amp;gt;search(&amp;#34;abc&amp;#34;); // 存在しないので p2 == nullptr auto p3 = root-&amp;gt;search(&amp;#34;abcde&amp;#34;); // 存在するので，p3 == p1 auto p4 = root-&amp;gt;get_node(&amp;#34;abc&amp;#34;); // 存在に関係無くノードを取る assert(p3-&amp;gt;reside); // そのノードは存在ノードか? assert(not p4-&amp;gt;reside); root-&amp;gt;insert(&amp;#34;abab&amp;#34;); assert(root-&amp;gt;size_st == 2) // 部分木に存在する数 p3-&amp;gt;erase(); // 削除 assert(not p3-&amp;gt;reside); assert(p4-&amp;gt;size_st == 1); インタフェース テンプレートパラメタ template &amp;lt; int bt_size, // 文字種 char from, // 最初の文字 typename User = monostate, // ユーザデータの型 typename S = string, // 管理するデータの型．string とか vector&amp;lt;char&amp;gt; とか bool compact = 2 &amp;lt; bt_size, // 省メモリ型 bool has_offset = true // オフセットの管理方法 &amp;gt; struct Trie { bt_size &amp;hellip; 文字種．小文字の文字列なら 26, 01列なら 2 など． from &amp;hellip; 最初の文字．小文字なら &#39;a&#39;, 01文字列なら &#39;0&#39;，整数の01列なら 0 など． User &amp;hellip; ユーザデータの型．引数無しで構築できなければならない．省略値は monostate で，これは，何も要素を持たない構造体． S &amp;hellip; この trie で管理するデータの型．たいてい string だろうけれど，vector&amp;lt;int&amp;gt; とかでも可．ただし，値は from から from + bt_size までで，char の範囲に入っていること． compact &amp;hellip; たとえば全ノードに長さ26のベクトルを持たせるというのはちょっと無駄なので，ここを true にすると，もう少し領域を節約する．ただし，少しは遅くなる (そんなには遅くないと思う) ので，false にすると，固定長 array になる． has_offset &amp;hellip; ノードに，何文字目であるかを持たせるかどうか．これはノードごと 4 バイトしか違わないので，いつでも true でも良かったか&amp;hellip;.</description>
    </item>
  </channel>
</rss>
